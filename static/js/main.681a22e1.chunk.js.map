{"version":3,"sources":["components/scraping/Texte.js","components/api/graphQL.js","components/scraping/Scraping.js","components/nlp/options/Lemmatizing.js","components/nlp/options/PosTag.js","components/nlp/options/Stemming.js","components/nlp/options/Tokenize.js","components/nlp/options/BagOfWords.js","components/nlp/Options.js","components/nlp/Output.js","components/nlp/NlpServices.js","components/otherservices/sentiments/SentimentResult.js","components/otherservices/sentiments/SentimentAnalysis.js","components/otherservices/fakenews/FakeNews.js","components/otherservices/SentimentFakeContainer.js","App.js","reportWebVitals.js","index.js"],"names":["Texte","text","className","graphQlApi","query","a","url","process","REACT_APP_API_URL","fetch","method","headers","body","JSON","stringify","then","res","json","data","Scraping","useState","setUrl","setText","scrapp","e","preventDefault","scraping","onSubmit","id","type","value","placeholder","onChange","target","required","Lemmatizing","textInput","setOutput","setArray","language","includeStopWords","setDivColor","lemmatize","lemmatizing","onClick","PosTag","getPosTags","postag","posTag","Stemming","lancaster","setLancaster","stem","stemming","name","checked","Tokenize","tokenizeByWords","setTokenizeByWords","tokenize","BagOfWords","getBagsOfWords","bagOfWords","Options","setLanguage","setIncludeStopWords","divColor","defaultChecked","style","Output","output","array","map","item","index","NlpServices","setTextInput","cols","rows","SentimentResult","result","colors","setValue","widths","setWidths","color","setColor","useEffect","pos","neg","neu","compound","SentimentAnalysis","setresult","analyse","sentiment","FakeNews","fakeNews","SentimentFakeContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.681a22e1.chunk.js","sourcesContent":["import React from 'react'\r\nimport './scraping.css'\r\n\r\nexport default function Texte({ text }) {\r\n    return (\r\n        <div className='texte-container'>\r\n            <p>{text}</p>\r\n        </div>\r\n    )\r\n}\r\n","export default async function graphQlApi(query) {\r\n    const url = process.env.REACT_APP_API_URL || 'https://detect-covid-fake-news.herokuapp.com/'\r\n    return fetch(url, {\r\n        method: 'POST',\r\n        headers: { \"Content-type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n            query: query\r\n        })\r\n    }).then(res => res.json()).then(json => json.data)\r\n}","import React, { useState } from 'react'\r\nimport Texte from './Texte'\r\nimport graphQlApi from '../api/graphQL'\r\nimport './scraping.css';\r\n\r\nexport default function Scraping() {\r\n    const [url, setUrl] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n\r\n    const scrapp = async e => {\r\n        e.preventDefault()\r\n        setText(\"\")\r\n        let query = `\r\n            query {\r\n                scraping(url: \"${url}\")\r\n              }\r\n        `\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.scraping) {\r\n            setText(data.scraping)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"scrapping-container\">\r\n            <h2>Scraping</h2>\r\n            <form onSubmit={scrapp}>\r\n                <div>\r\n                    <label>\r\n                        <p>enter url :</p>\r\n                        <input id=\"input-url\" type=\"url\" value={url} placeholder=\"https://url.domain\" onChange={e => setUrl(e.target.value)} required />\r\n                    </label>\r\n                    <button id=\"scrapp-btn\">scrap</button>\r\n                </div>\r\n            </form>\r\n            <Texte text={text} />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport graphQlApi from '../../api/graphQL'\r\nimport '../nlp.css'\r\n\r\nexport default function Lemmatizing({ textInput, setOutput, setArray, language, includeStopWords, setDivColor }) {\r\n\r\n    const lemmatize = async e => {\r\n        let query = `\r\n            query {\r\n                lemmatizing(text: \"${textInput}\", language: \"${language}\", stopWords: ${includeStopWords})\r\n            }\r\n        `\r\n        setDivColor({ lemmatizing: { 'backgroundColor': 'rgb(183, 185, 187)' } })\r\n        setOutput(null)\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.lemmatizing) {\r\n            setArray(false)\r\n            setOutput(data.lemmatizing)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"option\">\r\n            <button className=\"options-btn\" onClick={lemmatize}>lemmatize</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport graphQlApi from '../../api/graphQL'\r\nimport '../nlp.css'\r\n\r\nexport default function PosTag({ textInput, setOutput, setArray, language, includeStopWords, setDivColor }) {\r\n\r\n    const getPosTags = async e => {\r\n        let query = `\r\n            query {\r\n                posTag(text: \"${textInput}\",language: \"${language}\", stopWords: ${includeStopWords})\r\n            }\r\n        `\r\n        setDivColor({ postag: { 'backgroundColor': 'rgb(183, 185, 187)' } })\r\n        setOutput(null)\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.posTag) {\r\n            setArray(false)\r\n            setOutput(data.posTag)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"option\">\r\n            <button className=\"options-btn\" onClick={getPosTags}>pos-tags</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport graphQlApi from '../../api/graphQL'\r\nimport '../nlp.css'\r\n\r\nexport default function Stemming({ textInput, setOutput, setArray, language, includeStopWords, setDivColor }) {\r\n    const [lancaster, setLancaster] = useState(true)\r\n\r\n    const stem = async e => {\r\n        let query = `\r\n            query {\r\n                stemming(text: \"${textInput}\", language: \"${language}\", lancaster: ${lancaster}, stopWords: ${includeStopWords})\r\n            }\r\n        `\r\n        setDivColor({ stemming: { 'backgroundColor': 'rgb(183, 185, 187)' } })\r\n        setOutput(null)\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.stemming) {\r\n            setArray(false)\r\n            setOutput(data.stemming)\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"option\">\r\n            <button className=\"options-btn\" onClick={stem}>Stem</button>\r\n            <div>\r\n                {language !== 'arabic' &&\r\n                    <div>\r\n                        <label>\r\n                            Lancaster\r\n                                <input className=\"radio-btn\" type=\"radio\" value=\"true\" name=\"algorithm\" checked={lancaster} onChange={e => setLancaster(e.target.value === 'true')} />\r\n                        </label>\r\n                        <label>\r\n                            <input className=\"radio-btn\" type=\"radio\" value=\"false\" name=\"algorithm\" checked={!lancaster} onChange={e => setLancaster(e.target.value === 'true')} />\r\n                                Porter\r\n                        </label>\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport graphQlApi from '../../api/graphQL'\r\nimport '../nlp.css'\r\n\r\n\r\nexport default function Tokenize({ textInput, setOutput, setArray, language, includeStopWords, setDivColor }) {\r\n\r\n    const [tokenizeByWords, setTokenizeByWords] = useState(true)\r\n\r\n    const tokenize = async e => {\r\n\r\n        let query = `\r\n            query {\r\n                tokenize(text: \"${textInput}\",language: \"${language}\" words: ${tokenizeByWords}, stopWords: ${includeStopWords})\r\n            }\r\n        `\r\n        setDivColor({ tokenize: { 'backgroundColor': 'rgb(183, 185, 187)' } })\r\n\r\n        setOutput(null)\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.tokenize) {\r\n            setArray(true)\r\n            setOutput(data.tokenize)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"option\">\r\n            <button className=\"options-btn\" onClick={tokenize}>Tokenize</button>\r\n            <div>\r\n                <label>\r\n                    words\r\n                    <input className=\"radio-btn\" type=\"radio\" value=\"true\" name=\"method\" checked={tokenizeByWords} onChange={e => setTokenizeByWords(e.target.value === 'true')} />\r\n                </label>\r\n                <label>\r\n                    <input className=\"radio-btn\" type=\"radio\" value=\"false\" name=\"method\" checked={!tokenizeByWords} onChange={e => setTokenizeByWords(e.target.value === 'true')} />\r\n                    sentences\r\n                </label>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport graphQlApi from '../../api/graphQL'\r\nimport '../nlp.css'\r\n\r\nexport default function BagOfWords({ textInput, setOutput, setArray, language, includeStopWords, setDivColor }) {\r\n\r\n    const getBagsOfWords = async e => {\r\n        let query = `\r\n            query {\r\n                bagOfWords(text: \"${textInput}\",language: \"${language}\", stopWords: ${includeStopWords})\r\n            }\r\n        `\r\n        setDivColor({ BagOfWords: { 'backgroundColor': 'rgb(183, 185, 187)' } })\r\n        setOutput(null)\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.bagOfWords) {\r\n            setArray(true)\r\n            setOutput(data.bagOfWords)\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"option\">\r\n            <button className=\"options-btn\" onClick={getBagsOfWords}>BagOfWords</button>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Lemmatizing from './options/Lemmatizing'\r\nimport PosTag from './options/PosTag'\r\nimport Stemming from './options/Stemming'\r\nimport Tokenize from './options/Tokenize'\r\nimport './nlp.css'\r\nimport BagOfWords from './options/BagOfWords'\r\n\r\n\r\nexport default function Options({ textInput, setOutput, setArray }) {\r\n\r\n    const [language, setLanguage] = useState('arabic')\r\n    const [includeStopWords, setIncludeStopWords] = useState(true)\r\n    const [divColor, setDivColor] = useState({})\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"options-container\">\r\n            <div className=\"option\">\r\n                <select className=\"select-language\" onChange={e => { setLanguage(e.target.value) }}>\r\n                    <option value=\"arabic\">Arabic</option>\r\n                    <option value=\"english\">English</option>\r\n                </select>\r\n                <label>\r\n                    <input\r\n                        className=\"stop-wrd-chkbx\"\r\n                        type=\"checkbox\"\r\n                        defaultChecked={includeStopWords}\r\n                        onChange={e => { setIncludeStopWords(!includeStopWords) }}\r\n                    />\r\n                    remove stop words\r\n                </label>\r\n            </div>\r\n\r\n            <hr />\r\n            <div style={divColor.tokenize}>\r\n                <Tokenize\r\n                    textInput={textInput}\r\n                    setOutput={setOutput}\r\n                    setArray={setArray}\r\n                    language={language}\r\n                    includeStopWords={includeStopWords}\r\n                    setDivColor={setDivColor}\r\n                />\r\n            </div>\r\n            <hr />\r\n            <div style={divColor.stemming} >\r\n                <Stemming\r\n                    textInput={textInput}\r\n                    setOutput={setOutput}\r\n                    setArray={setArray}\r\n                    language={language}\r\n                    includeStopWords={includeStopWords}\r\n                    setDivColor={setDivColor}\r\n                />\r\n            </div>\r\n            <hr />\r\n            <div style={divColor.lemmatizing}>\r\n                <Lemmatizing\r\n                    textInput={textInput}\r\n                    setOutput={setOutput}\r\n                    setArray={setArray}\r\n                    language={language}\r\n                    includeStopWords={includeStopWords}\r\n                    setDivColor={setDivColor}\r\n                />\r\n            </div>\r\n            <hr />\r\n            <div style={divColor.postag}>\r\n                <PosTag\r\n                    textInput={textInput}\r\n                    setOutput={setOutput}\r\n                    setArray={setArray}\r\n                    language={language}\r\n                    includeStopWords={includeStopWords}\r\n                    setDivColor={setDivColor}\r\n                />\r\n            </div>\r\n            <hr />\r\n            <div style={divColor.BagOfWords}>\r\n                <BagOfWords\r\n                    textInput={textInput}\r\n                    setOutput={setOutput}\r\n                    setArray={setArray}\r\n                    language={language}\r\n                    includeStopWords={includeStopWords}\r\n                    setDivColor={setDivColor}\r\n                />\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './nlp.css'\r\n\r\nexport default function Output({ output, array }) {\r\n    return (\r\n        <div className=\"service-output-container\">\r\n            {output &&\r\n                <div>\r\n                    {array &&\r\n                        <div>\r\n                            <p>{'['}</p>\r\n                            {\r\n                                output.map((item, index )=> {\r\n                                    return (\r\n                                        <p key={index} className=\"result-field-item\">'{item}',</p>\r\n                                    )\r\n                                })\r\n                            }\r\n                            <p>{']'}</p>\r\n                        </div>\r\n                    }\r\n                    {!array &&\r\n                        <div>\r\n                            <p>{'{'}</p>\r\n                               {\r\n                                    output.map((item, index ) => {\r\n                                        return (\r\n                                            <p key={index} className=\"result-field-item\">'{item[0]}' : '{item[1]}'</p>\r\n                                        )\r\n                                    })\r\n                               }\r\n                            <p>{'}'}</p>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Options from './Options';\r\nimport Outpput from './Output';\r\nimport './nlp.css'\r\n\r\nexport default function NlpServices() {\r\n    const [textInput, setTextInput] = useState(\"\")\r\n    const [output, setOutput] = useState()\r\n    const [array, setArray] = useState(false)\r\n\r\n\r\n    return (\r\n        <div className=\"services-container\">\r\n            <h2>NLP Services</h2>\r\n            <div className=\"services\">\r\n                <div className=\"service-input\">\r\n                    <div>\r\n                        <p>enter text :</p>\r\n                        <textarea value={textInput} cols=\"40\" rows=\"20\" onChange={e => setTextInput(e.target.value)} />\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"service-options\">\r\n                    <Options textInput={textInput} setOutput={setOutput} setArray={setArray} />\r\n                </div>\r\n                <div className=\"service-output\">\r\n                    <Outpput output={output} array={array} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport '../sentFake.css'\r\n\r\nexport default function SentimentResult({ result }) {\r\n    let colors = ['rgb(33, 112, 9)', 'red', 'cornsilk', 'blue'];\r\n    const [value, setValue] = useState(\"\")\r\n    const [widths, setWidths] = useState(['0 px', '0 px', '0 px', '0 px'])\r\n    const [color, setColor] = useState({ color: colors[0] })\r\n\r\n\r\n    useEffect(() => {\r\n        let colors = ['rgb(33, 112, 9)', 'red', 'cornsilk', 'blue'];\r\n        if (result) {\r\n            if (result.pos > result.neg && result.pos > result.neu) {\r\n                setColor({ color: colors[0] })\r\n                setValue(\"Positif\")\r\n            } else if (result.neg > result.pos && result.neg > result.neu) {\r\n                setColor({ color: colors[1] })\r\n                setValue('Negatif')\r\n            } else if (result.neu > result.pos && result.neu > result.neg) {\r\n                setColor({ color: colors[2] })\r\n                setValue('Neutral')\r\n            } else {\r\n                setValue('')\r\n            }\r\n            setWidths([\r\n                result.pos * 100 + 'px',\r\n                result.neg * 100 + 'px',\r\n                result.neu * 100 + 'px',\r\n                result.compound * 100 + 'px',\r\n            ])\r\n        }\r\n    }, [result])\r\n\r\n    return (\r\n        <div className=\"sent-fake-result-container\">\r\n            <p className=\"sent-fake-result-p\">\r\n                result :\r\n                <strong style={color}>{value}</strong>\r\n            </p>\r\n\r\n            <div>\r\n                <p>details :</p>\r\n                <div className=\"details-container\">\r\n                    <div>\r\n                        <div className=\"sent-result-details\">\r\n                            <div className=\"circle\" style={{ 'backgroundColor': colors[0] }}></div>\r\n                            <p className='sent-result-detail-p'>pos : {result && result.pos}</p>\r\n                        </div>\r\n                        <div className=\"sent-result-details\">\r\n                            <div className=\"circle\" style={{ 'backgroundColor': colors[1] }}></div>\r\n                            <p className='sent-result-detail-p'>neg : {result && result.neg}</p>\r\n                        </div>\r\n                        <div className=\"sent-result-details\">\r\n                            <div className=\"circle\" style={{ 'backgroundColor': colors[2] }}></div>\r\n                            <p className='sent-result-detail-p'>neu : {result && result.neu}</p>\r\n                        </div>\r\n                        <div className=\"sent-result-details\">\r\n                            <div className=\"circle\" style={{ 'backgroundColor': 'blue' }}></div>\r\n                            <p className='sent-result-detail-p'>compound : {result && result.compound}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"lines\">\r\n                        {\r\n                            result &&\r\n                            <div>\r\n                                <div className=\"line\" style={{ 'backgroundColor': colors[0], 'width': widths[0] }}></div>\r\n                                <div className=\"line\" style={{ 'backgroundColor': colors[1], 'width': widths[1] }}></div>\r\n                                <div className=\"line\" style={{ 'backgroundColor': colors[2], 'width': widths[2] }}></div>\r\n                                <div className=\"line\" style={{ 'backgroundColor': colors[3], 'width': widths[3] }}></div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport SentimentResult from './SentimentResult'\r\nimport graphQlApi from '../../api/graphQL'\r\nimport '../sentFake.css'\r\n\r\nexport default function SentimentAnalysis() {\r\n    const [text, setText] = useState(\"\")\r\n    const [result, setresult] = useState()\r\n\r\n    const analyse = async e => {\r\n\r\n\r\n        let query = `\r\n            query{\r\n                sentiment(text: \"${text}\"){\r\n                neg\r\n                neu\r\n                pos\r\n                compound\r\n                }\r\n            }\r\n        `\r\n        setresult(null)\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.sentiment) {\r\n            setresult(data.sentiment)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"sent-container\">\r\n            <h3>Sentiment Analysis</h3>\r\n            <div className=\"sent-fake-main\">\r\n                <div>\r\n                    <p>enter text here :</p>\r\n                    <textarea value={text} cols=\"30\" rows=\"8\" onChange={e => setText(e.target.value)} />\r\n                </div>\r\n                <div >\r\n                    <button className=\"sent-fake-btn\" onClick={analyse}>Analyse</button>\r\n                </div>\r\n                <div>\r\n                    <SentimentResult result={result} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport '../sentFake.css'\r\nimport graphQlApi from '../../api/graphQL'\r\n\r\nexport default function FakeNews() {\r\n    const [text, setText] = useState(\"\")\r\n    const [result, setresult] = useState('')\r\n    let colors = ['rgb(33, 112, 9)', 'red'];\r\n    const [color, setColor] = useState({ color: colors[0], 'marginLeft': '15px' })\r\n\r\n    const analyse = async e => {\r\n        e.preventDefault()\r\n\r\n        setresult('')\r\n\r\n        let query = `\r\n            query{\r\n                fakeNews(text: \"${text}\")\r\n            }\r\n        `\r\n\r\n        const data = await graphQlApi(query)\r\n\r\n        if (data && data.fakeNews) {\r\n            setresult(data.fakeNews)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let colors = ['rgb(33, 112, 9)', 'red'];\r\n        if (result) {\r\n            if (result === 'TRUE') {\r\n                setColor({ color: colors[0], 'marginLeft': '15px' })\r\n            } else if (result === 'FAKE') {\r\n                setColor({ color: colors[1], 'marginLeft': '15px' })\r\n            } else {\r\n                setresult('')\r\n            }\r\n        }\r\n    }, [result])\r\n\r\n    return (\r\n        <div className=\"fake-container\">\r\n            <h3>Fake News about COVID </h3>\r\n            <div className=\"sent-fake-main\">\r\n                <div>\r\n                    <p>enter text here :</p>\r\n                    <textarea value={text} cols=\"30\" rows=\"8\" onChange={e => setText(e.target.value)} />\r\n                </div>\r\n                <div >\r\n                    <button className=\"sent-fake-btn\" onClick={analyse}>Analyse</button>\r\n                </div>\r\n                <div className=\"sent-fake-result-container\">\r\n                    <p className=\"sent-fake-result-p\">\r\n                        result :\r\n                        <strong style={color}>{result && result}</strong>\r\n                    </p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport SentimentAnalysis from './sentiments/SentimentAnalysis'\r\nimport FakeNews from './fakenews/FakeNews'\r\nimport './sentFake.css'\r\n\r\nexport default function SentimentFakeContainer() {\r\n    return (\r\n        <div className=\"sent-fake-container\">\r\n            <h2>Other Services</h2>\r\n            <div className=\"sent-fake-components\">\r\n                <div className=\"sentiment-analysis\">\r\n                    <SentimentAnalysis />\r\n                </div>\r\n                <div className=\"fake-news\">\r\n                    <FakeNews />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Scraping from './components/scraping/Scraping'\r\nimport NlpServices from './components/nlp/NlpServices'\r\nimport './App.css';\r\nimport SentimentFakeContainer from './components/otherservices/SentimentFakeContainer';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <section className=\"scrapping\">\r\n        <Scraping />\r\n      </section>\r\n      <section className=\"nlp\">\r\n        <NlpServices />\r\n      </section>\r\n      <section className=\"sent-fake\">\r\n        <SentimentFakeContainer />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}